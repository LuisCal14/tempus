{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\estro\\\\OneDrive\\\\Escritorio\\\\Tempus.Dev\\\\tempus\\\\src\\\\components\\\\_writing\\\\Writing.js\",\n  _s = $RefreshSig$();\nimport Typed from \"typed.js\";\nimport { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Writing() {\n  _s();\n  // Create Ref element.\n  const el = useRef(null);\n  useEffect(() => {\n    const typed = new Typed('.typed', {\n      strings: ['<i class=\"mascota\">Gato</i>', '<i class=\"mascota\">Perro</i>', '<i class=\"mascota\">Conejo</i>', '<i class=\"mascota\">Pez</i>'],\n      //stringsElement: '#cadenas-texto', // ID del elemento que contiene cadenas de texto a mostrar.\n      typeSpeed: 75,\n      // Velocidad en mlisegundos para poner una letra,\n      startDelay: 300,\n      // Tiempo de retraso en iniciar la animacion. Aplica tambien cuando termina y vuelve a iniciar,\n      backSpeed: 75,\n      // Velocidad en milisegundos para borrrar una letra,\n      smartBackspace: true,\n      // Eliminar solamente las palabras que sean nuevas en una cadena de texto.\n      shuffle: false,\n      // Alterar el orden en el que escribe las palabras.\n      backDelay: 1500,\n      // Tiempo de espera despues de que termina de escribir una palabra.\n      loop: true,\n      // Repetir el array de strings\n      loopCount: false,\n      // Cantidad de veces a repetir el array.  false = infinite\n      showCursor: true,\n      // Mostrar cursor palpitanto\n      cursorChar: '|',\n      // Caracter para el cursor\n      contentType: 'html' // 'html' o 'null' para texto sin formato\n    });\n\n    // Destropying\n    return () => {\n      typed.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello Developers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      ref: el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Writing, \"bH7R4hqe0oCFqrqYinS8ShQEwjI=\");\n_c = Writing;\nvar _c;\n$RefreshReg$(_c, \"Writing\");","map":{"version":3,"names":["Typed","useEffect","useRef","Writing","el","typed","strings","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","loop","loopCount","showCursor","cursorChar","contentType","destroy"],"sources":["C:/Users/estro/OneDrive/Escritorio/Tempus.Dev/tempus/src/components/_writing/Writing.js"],"sourcesContent":["\r\nimport Typed from \"typed.js\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function Writing() {\r\n  // Create Ref element.\r\n  const el = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const typed = new Typed('.typed', {\r\n        strings: [\r\n            '<i class=\"mascota\">Gato</i>',\r\n            '<i class=\"mascota\">Perro</i>',\r\n            '<i class=\"mascota\">Conejo</i>',\r\n            '<i class=\"mascota\">Pez</i>'\r\n        ],\r\n    \r\n        //stringsElement: '#cadenas-texto', // ID del elemento que contiene cadenas de texto a mostrar.\r\n        typeSpeed: 75, // Velocidad en mlisegundos para poner una letra,\r\n        startDelay: 300, // Tiempo de retraso en iniciar la animacion. Aplica tambien cuando termina y vuelve a iniciar,\r\n        backSpeed: 75, // Velocidad en milisegundos para borrrar una letra,\r\n        smartBackspace: true, // Eliminar solamente las palabras que sean nuevas en una cadena de texto.\r\n        shuffle: false, // Alterar el orden en el que escribe las palabras.\r\n        backDelay: 1500, // Tiempo de espera despues de que termina de escribir una palabra.\r\n        loop: true, // Repetir el array de strings\r\n        loopCount: false, // Cantidad de veces a repetir el array.  false = infinite\r\n        showCursor: true, // Mostrar cursor palpitanto\r\n        cursorChar: '|', // Caracter para el cursor\r\n        contentType: 'html', // 'html' o 'null' para texto sin formato\r\n    });\r\n\r\n    // Destropying\r\n    return () => {\r\n      typed.destroy();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Hello Developers</h1>\r\n      {/* Element to display typing strings */}\r\n      <span ref={el}></span>\r\n    </div>\r\n  );\r\n}"],"mappings":";;AACA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAE1C,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC;EACA,MAAMC,EAAE,GAAGF,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMI,KAAK,GAAG,IAAIL,KAAK,CAAC,QAAQ,EAAE;MAC9BM,OAAO,EAAE,CACL,6BAA6B,EAC7B,8BAA8B,EAC9B,+BAA+B,EAC/B,4BAA4B,CAC/B;MAED;MACAC,SAAS,EAAE,EAAE;MAAE;MACfC,UAAU,EAAE,GAAG;MAAE;MACjBC,SAAS,EAAE,EAAE;MAAE;MACfC,cAAc,EAAE,IAAI;MAAE;MACtBC,OAAO,EAAE,KAAK;MAAE;MAChBC,SAAS,EAAE,IAAI;MAAE;MACjBC,IAAI,EAAE,IAAI;MAAE;MACZC,SAAS,EAAE,KAAK;MAAE;MAClBC,UAAU,EAAE,IAAI;MAAE;MAClBC,UAAU,EAAE,GAAG;MAAE;MACjBC,WAAW,EAAE,MAAM,CAAE;IACzB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXZ,KAAK,CAACa,OAAO,EAAE;IACjB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB,eAEzB;MAAM,GAAG,EAAEd;IAAG;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAClB;AAEV;AAAC,GAxCuBD,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}